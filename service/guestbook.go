package service

import (
	"undangan_online_api/entity"
	"undangan_online_api/helper"
	"undangan_online_api/input"
	"undangan_online_api/repository"
)

type GuestBookService interface {
	GuestBookServiceGetAll(params string) ([]entity.GuestBook, error)
	GuestBookServiceGetByID(inputID input.InputIDGuestBook) (entity.GuestBook, error)
	GuestBookServiceCreate(input input.GuestBookInput) (entity.GuestBook, error)
	GuestBookServiceUpdate(inputID input.InputIDGuestBook, inputData input.GuestBookInput) (entity.GuestBook, error)
	GuestBookServiceDeleteByID(inputID input.InputIDGuestBook) (bool, error)
}
type guestbookService struct {
	repository repository.GuestBookRepository
}

func NewGuestBookService(repository repository.GuestBookRepository) *guestbookService {
	return &guestbookService{repository}
}
func (s *guestbookService) GuestBookServiceCreate(input input.GuestBookInput) (entity.GuestBook, error) {
	guestbook := entity.GuestBook{}
	guestbook.IdUndangan = input.IdUndangan
	guestbook.NamaTamu = helper.XSSProtection(input.NamaTamu).(string)
	guestbook.StatusKehadiran = helper.XSSProtection(input.StatusKehadiran).(string)
	guestbook.Pesan = helper.XSSProtection(input.Pesan).(string)
	newGuestBook, err := s.repository.SaveGuestBook(guestbook)
	if err != nil {
		return newGuestBook, err
	}
	return newGuestBook, nil
}
func (s *guestbookService) GuestBookServiceUpdate(inputID input.InputIDGuestBook, inputData input.GuestBookInput) (entity.GuestBook, error) {
	guestbook, err := s.repository.FindByIDGuestBook(inputID.ID)
	if err != nil {
		return guestbook, err
	}
	guestbook.IdUndangan = inputData.IdUndangan
	guestbook.NamaTamu = inputData.NamaTamu
	guestbook.StatusKehadiran = inputData.StatusKehadiran
	guestbook.Pesan = inputData.Pesan

	updatedGuestBook, err := s.repository.UpdateGuestBook(guestbook)

	if err != nil {
		return updatedGuestBook, err
	}
	return updatedGuestBook, nil
}
func (s *guestbookService) GuestBookServiceGetByID(inputID input.InputIDGuestBook) (entity.GuestBook, error) {
	guestbook, err := s.repository.FindByIDGuestBook(inputID.ID)
	if err != nil {
		return guestbook, err
	}
	return guestbook, nil
}
func (s *guestbookService) GuestBookServiceGetAll(params string) ([]entity.GuestBook, error) {
	guestbooks, err := s.repository.FindAllGuestBook(params)
	if err != nil {
		return guestbooks, err
	}
	return guestbooks, nil
}
func (s *guestbookService) GuestBookServiceDeleteByID(inputID input.InputIDGuestBook) (bool, error) {
	_, err := s.repository.FindByIDGuestBook(inputID.ID)
	if err != nil {
		return false, err
	}
	_, err = s.repository.DeleteByIDGuestBook(inputID.ID)
	if err != nil {
		return false, err
	}
	return true, nil
}

//Generated by Micagen at 05 Juli 2022
