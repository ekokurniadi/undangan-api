package service

import (
	"undangan_online_api/entity"
	"undangan_online_api/input"
	"undangan_online_api/repository"
)

type HadiahService interface {
	HadiahServiceGetAll() ([]entity.Hadiah, error)
	HadiahServiceGetByID(inputID input.InputIDHadiah) (entity.Hadiah, error)
	HadiahServiceCreate(input input.HadiahInput) (entity.Hadiah, error)
	HadiahServiceUpdate(inputID input.InputIDHadiah, inputData input.HadiahInput) (entity.Hadiah, error)
	HadiahServiceDeleteByID(inputID input.InputIDHadiah) (bool, error)
}
type hadiahService struct {
	repository repository.HadiahRepository
}

func NewHadiahService(repository repository.HadiahRepository) *hadiahService {
	return &hadiahService{repository}
}
func (s *hadiahService) HadiahServiceCreate(input input.HadiahInput) (entity.Hadiah, error) {
	hadiah := entity.Hadiah{}
	hadiah.IdUndangan = input.IdUndangan
	hadiah.NamaBank = input.NamaBank
	hadiah.NoRekening = input.NoRekening
	hadiah.NamaPenerima = input.NamaPenerima
	hadiah.AlamatPenerima = input.AlamatPenerima
	newHadiah, err := s.repository.SaveHadiah(hadiah)
	if err != nil {
		return newHadiah, err
	}
	return newHadiah, nil
}
func (s *hadiahService) HadiahServiceUpdate(inputID input.InputIDHadiah, inputData input.HadiahInput) (entity.Hadiah, error) {
	hadiah, err := s.repository.FindByIDHadiah(inputID.ID)
	if err != nil {
		return hadiah, err
	}
	hadiah.IdUndangan = inputData.IdUndangan
	hadiah.NamaBank = inputData.NamaBank
	hadiah.NoRekening = inputData.NoRekening
	hadiah.NamaPenerima = inputData.NamaPenerima
	hadiah.AlamatPenerima = inputData.AlamatPenerima

	updatedHadiah, err := s.repository.UpdateHadiah(hadiah)

	if err != nil {
		return updatedHadiah, err
	}
	return updatedHadiah, nil
}
func (s *hadiahService) HadiahServiceGetByID(inputID input.InputIDHadiah) (entity.Hadiah, error) {
	hadiah, err := s.repository.FindByIDHadiah(inputID.ID)
	if err != nil {
		return hadiah, err
	}
	return hadiah, nil
}
func (s *hadiahService) HadiahServiceGetAll() ([]entity.Hadiah, error) {
	hadiahs, err := s.repository.FindAllHadiah()
	if err != nil {
		return hadiahs, err
	}
	return hadiahs, nil
}
func (s *hadiahService) HadiahServiceDeleteByID(inputID input.InputIDHadiah) (bool, error) {
	_, err := s.repository.FindByIDHadiah(inputID.ID)
	if err != nil {
		return false, err
	}
	_, err = s.repository.DeleteByIDHadiah(inputID.ID)
	if err != nil {
		return false, err
	}
	return true, nil
}

//Generated by Micagen at 05 Juli 2022
