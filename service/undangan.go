package service

import (
	"time"
	"undangan_online_api/entity"
	"undangan_online_api/input"
	"undangan_online_api/repository"
)

type UndanganService interface {
	UndanganServiceGetAll() ([]entity.Undangan, error)
	UndanganServiceGetByID(inputID input.InputIDUndangan) (entity.Undangan, error)
	UndanganServiceCreate(input input.UndanganInput) (entity.Undangan, error)
	UndanganServiceUpdate(inputID input.InputIDUndangan, inputData input.UndanganInput) (entity.Undangan, error)
	UndanganServiceDeleteByID(inputID input.InputIDUndangan) (bool, error)
}
type undanganService struct {
	repository repository.UndanganRepository
}

func NewUndanganService(repository repository.UndanganRepository) *undanganService {
	return &undanganService{repository}
}
func (s *undanganService) UndanganServiceCreate(input input.UndanganInput) (entity.Undangan, error) {
	undangan := entity.Undangan{}
	undangan.KodeUndangan = input.KodeUndangan
	undangan.KodeTemaUndangan = input.KodeTemaUndangan
	undangan.NameTemaUndangan = input.NameTemaUndangan
	undangan.NamaPria = input.NamaPria
	undangan.NamaWanita = input.NamaWanita
	undangan.TanggalResepsi = input.TanggalResepsi
	undangan.NamaOrangTuaPria = input.NamaOrangTuaPria
	undangan.NamaOrangTuaWanita = input.NamaOrangTuaWanita
	undangan.AlamatOrangTuaPria = input.AlamatOrangTuaPria
	undangan.AlamatOrangTuaWanita = input.AlamatOrangTuaWanita
	undangan.LokasiResepsi = input.LokasiResepsi
	undangan.Latitude = input.Latitude
	undangan.Longitude = input.Longitude
	undangan.LinkVideoPreWed = input.LinkVideoPreWed
	undangan.ExpiredAt = time.Date(time.Now().Year(), time.Now().Month(), time.Now().Day()+30, time.Now().Hour(), time.Now().Minute(), time.Now().Second(), time.Now().Nanosecond(), time.Local)
	undangan.Status = input.Status
	undangan.FotoPria = input.FotoPria
	undangan.FotoWanita = input.FotoWanita
	newUndangan, err := s.repository.SaveUndangan(undangan)
	if err != nil {
		return newUndangan, err
	}
	return newUndangan, nil
}
func (s *undanganService) UndanganServiceUpdate(inputID input.InputIDUndangan, inputData input.UndanganInput) (entity.Undangan, error) {
	undangan, err := s.repository.FindByIDUndangan(inputID.ID)
	if err != nil {
		return undangan, err
	}
	undangan.KodeUndangan = inputData.KodeUndangan
	undangan.KodeTemaUndangan = inputData.KodeTemaUndangan
	undangan.NameTemaUndangan = inputData.NameTemaUndangan
	undangan.NamaPria = inputData.NamaPria
	undangan.NamaWanita = inputData.NamaWanita
	undangan.TanggalResepsi = inputData.TanggalResepsi
	undangan.NamaOrangTuaPria = inputData.NamaOrangTuaPria
	undangan.NamaOrangTuaWanita = inputData.NamaOrangTuaWanita
	undangan.AlamatOrangTuaPria = inputData.AlamatOrangTuaPria
	undangan.AlamatOrangTuaWanita = inputData.AlamatOrangTuaWanita
	undangan.LokasiResepsi = inputData.LokasiResepsi
	undangan.Latitude = inputData.Latitude
	undangan.Longitude = inputData.Longitude
	undangan.LinkVideoPreWed = inputData.LinkVideoPreWed
	undangan.Status = inputData.Status
	undangan.FotoPria = inputData.FotoPria
	undangan.FotoWanita = inputData.FotoWanita

	updatedUndangan, err := s.repository.UpdateUndangan(undangan)

	if err != nil {
		return updatedUndangan, err
	}
	return updatedUndangan, nil
}
func (s *undanganService) UndanganServiceGetByID(inputID input.InputIDUndangan) (entity.Undangan, error) {
	undangan, err := s.repository.FindByIDUndangan(inputID.ID)
	if err != nil {
		return undangan, err
	}
	return undangan, nil
}
func (s *undanganService) UndanganServiceGetAll() ([]entity.Undangan, error) {
	undangans, err := s.repository.FindAllUndangan()
	if err != nil {
		return undangans, err
	}
	return undangans, nil
}
func (s *undanganService) UndanganServiceDeleteByID(inputID input.InputIDUndangan) (bool, error) {
	_, err := s.repository.FindByIDUndangan(inputID.ID)
	if err != nil {
		return false, err
	}
	_, err = s.repository.DeleteByIDUndangan(inputID.ID)
	if err != nil {
		return false, err
	}
	return true, nil
}

//Generated by Micagen at 05 Juli 2022
