package repository

import (
	"undangan_online_api/entity"

	"gorm.io/gorm"
)

type HadiahRepository interface {
	SaveHadiah(hadiah entity.Hadiah) (entity.Hadiah, error)
	UpdateHadiah(hadiah entity.Hadiah) (entity.Hadiah, error)
	FindByIDHadiah(ID int) (entity.Hadiah, error)
	FindAllHadiah(params string) ([]entity.Hadiah, error)
	DeleteByIDHadiah(ID int) (entity.Hadiah, error)
}

type hadiahRepository struct {
	db *gorm.DB
}

func NewHadiahRepository(db *gorm.DB) *hadiahRepository {
	return &hadiahRepository{db}
}

func (r *hadiahRepository) SaveHadiah(hadiah entity.Hadiah) (entity.Hadiah, error) {
	err := r.db.Create(&hadiah).Error
	if err != nil {
		return hadiah, err
	}
	return hadiah, nil

}
func (r *hadiahRepository) FindByIDHadiah(ID int) (entity.Hadiah, error) {
	var hadiah entity.Hadiah
	err := r.db.Where("id = ? ", ID).Find(&hadiah).Error
	if err != nil {
		return hadiah, err
	}
	return hadiah, nil

}
func (r *hadiahRepository) UpdateHadiah(hadiah entity.Hadiah) (entity.Hadiah, error) {
	err := r.db.Save(&hadiah).Error
	if err != nil {
		return hadiah, err
	}
	return hadiah, nil

}
func (r *hadiahRepository) FindAllHadiah(params string) ([]entity.Hadiah, error) {
	var hadiahs []entity.Hadiah
	err := r.db.Where("id_undangan = ?", params).Find(&hadiahs).Error
	if err != nil {
		return hadiahs, err
	}
	return hadiahs, nil

}
func (r *hadiahRepository) DeleteByIDHadiah(ID int) (entity.Hadiah, error) {
	var hadiah entity.Hadiah
	err := r.db.Where("id = ? ", ID).Delete(&hadiah).Error
	if err != nil {
		return hadiah, err
	}
	return hadiah, nil

}

//Generated by Micagen at 05 Juli 2022
