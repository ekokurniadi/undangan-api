package repository

import (
	"undangan_online_api/entity"

	"gorm.io/gorm"
)

type GaleriRepository interface {
	SaveGaleri(galeri entity.Galeri) (entity.Galeri, error)
	UpdateGaleri(galeri entity.Galeri) (entity.Galeri, error)
	FindByIDGaleri(ID int) (entity.Galeri, error)
	FindAllGaleri(params string) ([]entity.Galeri, error)
	DeleteByIDGaleri(ID int) (entity.Galeri, error)
}

type galeriRepository struct {
	db *gorm.DB
}

func NewGaleriRepository(db *gorm.DB) *galeriRepository {
	return &galeriRepository{db}
}

func (r *galeriRepository) SaveGaleri(galeri entity.Galeri) (entity.Galeri, error) {
	err := r.db.Create(&galeri).Error
	if err != nil {
		return galeri, err
	}
	return galeri, nil

}
func (r *galeriRepository) FindByIDGaleri(ID int) (entity.Galeri, error) {
	var galeri entity.Galeri
	err := r.db.Where("id = ? ", ID).Find(&galeri).Error
	if err != nil {
		return galeri, err
	}
	return galeri, nil

}
func (r *galeriRepository) UpdateGaleri(galeri entity.Galeri) (entity.Galeri, error) {
	err := r.db.Save(&galeri).Error
	if err != nil {
		return galeri, err
	}
	return galeri, nil

}
func (r *galeriRepository) FindAllGaleri(params string) ([]entity.Galeri, error) {
	var galeris []entity.Galeri
	err := r.db.Where("id_undangan = ? ", params).Find(&galeris).Error
	if err != nil {
		return galeris, err
	}
	return galeris, nil

}
func (r *galeriRepository) DeleteByIDGaleri(ID int) (entity.Galeri, error) {
	var galeri entity.Galeri
	err := r.db.Where("id = ? ", ID).Delete(&galeri).Error
	if err != nil {
		return galeri, err
	}
	return galeri, nil

}

//Generated by Micagen at 05 Juli 2022
